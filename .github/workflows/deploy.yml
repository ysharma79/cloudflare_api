name: Deploy to Cloudflare Workers via Docker

on:
  push:
    branches:
      - main  # or master, depending on your default branch
  workflow_dispatch:  # Allow manual triggering of the workflow

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Apply D1 migrations using Docker
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          # Build the Docker image for migrations
          docker build -t cloudflare-d1-api-migrations .
          
          # Run migrations in Docker container
          docker run --rm \
            -e CLOUDFLARE_API_TOKEN="$CLOUDFLARE_API_TOKEN" \
            -e CLOUDFLARE_ACCOUNT_ID="$CLOUDFLARE_ACCOUNT_ID" \
            cloudflare-d1-api-migrations npx wrangler d1 migrations apply cloudflare-d1-api-db-production --env production
      
      - name: Deploy to Cloudflare Workers using Docker
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          # Build the Docker image for production deployment (if not already built)
          docker build -t cloudflare-d1-api-production .
          
          # Run the container to deploy to Cloudflare
          docker run --rm \
            -e CLOUDFLARE_API_TOKEN="$CLOUDFLARE_API_TOKEN" \
            -e CLOUDFLARE_ACCOUNT_ID="$CLOUDFLARE_ACCOUNT_ID" \
            cloudflare-d1-api-production npm run deploy:production
      
      - name: Verify deployment
        run: |
          echo "‚úÖ Deployment to Cloudflare Workers completed successfully!"
          echo "üåê Your API should now be available at your configured route or at the Workers subdomain."
